from discord.ext import commands
from discord.ext.commands import Context
from discord import Client, User, Embed, Colour
from classes.Player import Player
from classes.Game import Game
import classes.games.Battleships as bb
from main import get_prefix
from time import time
from re import search as re_search
import asyncio


class BattleshipsGameCog(commands.Cog):

    _player_to_game: dict[str, bb.BattleshipsGame] = {}  # allows player to use some commands outside the channel
    _channel_to_game: dict[str, bb.BattleshipsGame] = {}

    def __init__(self, client: Client):
        self.client: Client = client

    @commands.command(aliases=["Bchallenge", "BCHALLENGE", "bCHALLENGE"])
    async def bchallenge(self, ctx: Context, user: User):

        if ctx.guild is None:
            await ctx.reply("**–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤ –∫–æ–º—É-–ª–∏–±–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞**")
            return

        if ctx.author.id == user.id:
            await ctx.reply("**–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤ —Å–∞–º–æ–º—É —Å–µ–±–µ!**")
            return

        if ctx.channel.id in Game.occupied_channels:
            await ctx.reply("**–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –∑–∞–Ω—è—Ç –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–π!**")
            return

        if ctx.author.id in Player.occupied_players:
            await ctx.reply("**–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!**")
            return

        if user.id in Player.occupied_players:
            await ctx.reply(f"**{user.mention}  –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ!**")
            return

        embed = Embed(
            title="Battleships In-Game Commandsüìù",
            color=Colour.dark_blue()
        )

        prefix = get_prefix(self.client, ctx)

        embed.add_field(
            name="–í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚öôÔ∏è",
            value=f"**{prefix}bchallenge @user** (–≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –Ω–∞ –∏–≥—Ä—É –≤ –±–æ–µ–≤—ã–µ –∫–æ—Ä–∞–±–ª–∏)\n"
                  f"**{prefix}s pos** (—Å—Ç—Ä–µ–ª—è–π—Ç–µ –∏–∑ —Å–≤–æ–∏—Ö –ø—É—à–µ–∫ –ø–æ –ø–æ—Å—Ç—É) (Ex -> {prefix}s j6\n"
                  f"**{prefix}breroll** (–º–µ–Ω—è–π—Ç–µ —Å–≤–æ–π —Ñ–ª–æ—Ç –¥–æ 3 —Ä–∞–∑)\n"
                  f"**{prefix}btimeout** (–≤—ã–∏–≥—Ä–∞–π—Ç–µ, –µ—Å–ª–∏ –≤–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∏–≥—Ä–∞–ª –±–æ–ª–µ–µ 120 —Å–µ–∫—É–Ω–¥)\n"
                  f"**{prefix}myfleet** (–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ —Ñ–ª–æ—Ç–∞)\n"
                  f"**{prefix}bsurrender** (surrender the game)\n"
                  f"**{prefix}btie** (–ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –Ω–∏—á—å—é, –µ—Å–ª–∏ –≤—ã –æ–±–∞ —Å–æ–≥–ª–∞—Å–Ω—ã, —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–Ω–∏—á—å—é)\n"
        )

        message = await ctx.send(
            content=f"**{ctx.author.mention} –±—Ä–æ—Å–∏–ª –≤—ã–∑–æ–≤  {user.mention} –∫ –∏–≥—Ä–µ Battleships,"
                    f" —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –ª–∏ –æ–Ω?**",
            embed=embed
        )

        reactions = ["‚úÖ", "‚ùå"]
        accepted = False

        for reaction in reactions:
            await message.add_reaction(reaction)

        def check(react, author):
            return author == user and str(react.emoji) in reactions

        while True:
            try:

                reaction, user = await self.client.wait_for("reaction_add", timeout=30, check=check)

                if str(reaction.emoji) == "‚úÖ":
                    accepted = True
                    break
                elif str(reaction.emoji) == "‚ùå":
                    break

            except asyncio.TimeoutError:
                break

        if accepted:

            if ctx.channel.id in Game.occupied_channels:
                await ctx.reply("**–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –±—ã–ª –∑–∞–Ω—è—Ç –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–∑–æ–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç!**")
                return

            if ctx.author.id in Player.occupied_players:
                await ctx.reply("**–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ –µ—â–µ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–∑–æ–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç!**")
                return

            if user.id in Player.occupied_players:
                await ctx.reply(f"**{user.mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ –µ—â–µ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–∑–æ–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç!**")
                return

            players = [ctx.author.id, user.id]

            game = bb.BattleshipsGame(players)

            Game.occupied_channels.append(ctx.channel.id)
            self._channel_to_game[str(ctx.channel.id)] = game

            for player in players:

                Player.occupied_players.append(player)
                self._player_to_game[str(player)] = game

                display = game.display(discord_id=player, view_opponent_fleet=False)

                player_discord = await self.client.fetch_user(player)

                await player_discord.send(
                    content=f"**–í–∞—à —Ñ–ª–æ—Ç!(–¥–æ—Å—Ç—É–ø–Ω–æ 3 –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞)**\n{display}"
                )

            await ctx.send(
                content=f"{ctx.author.mention}|{user.mention}\n"
                        f"**–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥, –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ñ–ª–æ—Ç –¥–æ 3 —Ä–∞–∑,"
                        f" –µ—Å–ª–∏ –≤—ã –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã —Å–≤–æ–∏–º —Ç–µ–∫—É—â–∏–º –∞–≤—Ç–æ–ø–∞—Ä–∫–æ–º.**"
            )

            await asyncio.sleep(20)

            game.timer = time()
            game.ongoing = True

            await self.display(ctx, game)  # send the first message

        else:

            await ctx.reply(f"**{user.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª/–Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—ã–∑–æ–≤!**")

    @commands.command(aliases=["S", "shoot", "SHOOT", "Shoot", "sHOOT"])
    async def s(self, ctx: Context, pos: str):

        try:

            game = self._channel_to_game[str(ctx.channel.id)]

            if ctx.author.id not in game.player_ids:

                await ctx.reply("**–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é —ç—Ç–æ–π –∏–≥—Ä—ã —Å –ª–∏–Ω–∫–æ—Ä–∞–º–∏!**")
                return

        except KeyError:

            await ctx.reply("**–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∏–≥—Ä—ã Battleships, –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!**")
            return

        if not game.ongoing:

            await ctx.reply("**–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ**")
            return

        if ctx.author.id != game.current_round_player.discord_id:

            await ctx.reply("**–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å!**")
            return

        elif len(pos) != 2:

            await ctx.reply("**–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)\n"
                            "Example: a2**")
            return

        pos = pos.lower()

        pattern1 = "[a-j]+[0-9]"
        pattern2 = "[0-9]+[a-j]"

        if re_search(pattern1, pos):

            row = pos[0]
            column = int(pos[1])

        elif re_search(pattern2, pos):

            row = pos[1]
            column = int(pos[0])

        else:

            await ctx.reply("**–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)\n"
                            "Example: b6**")
            return

        hit, destroyed = game.shoot(row, column)

        if isinstance(hit, bb.Ship):

            if not destroyed:

                await ctx.reply(f"** –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∫–æ—Ä–∞–±–ª—å:boom:**")

            else:

                await ctx.reply(f"**–¢—ã –ø–æ—Ç–æ–ø–∏–ª {hit.name}({hit.size}):boom:**")

            if game.check_win():

                await ctx.send(f"**–ê–¥–º–∏—Ä–∞–ª:anchor: <@!{game.current_round_player.discord_id}>"
                               f" –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã–π –∞–¥–º–∏—Ä–∞–ª:anchor: <@!{game.next_player().discord_id}>!**")
                self.delete_game(ctx, game)

            else:

                game.next_round()

                await self.display(ctx, game)

        elif isinstance(hit, bb.Water):

            await ctx.reply(f"**–í—ã –Ω–µ –ø–æ–ø–∞–ª–∏!:radio_button:**")

            game.next_round()

            await self.display(ctx, game)

        elif isinstance(hit, bb.ExplodedShip):

            await ctx.reply(f"**–¢—ã –ø–æ–ø–∞–ª {pos} –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ—Ä–∞–±–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç–µ –≤ –Ω–æ–≤—ã–π –∫–≤–∞–¥—Ä–∞—Ç!**")

        else:

            await ctx.reply(f"**–¢—ã –ø–æ–ø–∞–ª {pos} –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∏ –≤–æ —á—Ç–æ –Ω–µ –ø–æ–ø–∞—Å—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç—Ä–µ–ª—è–π—Ç–µ –≤ –Ω–æ–≤—ã–π –∫–≤–∞–¥—Ä–∞—Ç!**")

    @commands.command(aliases=["Breroll", "BREROLL", "bREROLL"])
    async def breroll(self, ctx: Context):

        try:

            game = self._player_to_game[str(ctx.author.id)]

        except KeyError:

            await ctx.reply("**–í—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ –ø—Ä–æ –ª–∏–Ω–∫–æ—Ä—ã!**")
            return

        response = game.change_fleet(ctx.author.id)

        if response == -2:
            await ctx.reply("**–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ñ–ª–æ—Ç!**")
            return

        elif response == -1:
            await ctx.reply("**–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–≤—Ç–æ—Ä—ã!**")
            return

        display = game.display(ctx.author.id)

        await ctx.author.send(
            content=f"**–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω, —É –≤–∞—Å –µ—Å—Ç—å {response} –ø–æ–≤—Ç–æ—Ä—ã –≤–ª–µ–≤–æ!**\n{display}"
        )

    @commands.command(aliases=["Timeout", "TIMEOUT", "tIMEOUT"])
    async def btimeout(self, ctx: Context):

        try:

            game = self._channel_to_game[str(ctx.channel.id)]

            if ctx.author.id not in game.player_ids:

                await ctx.reply("**–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é —ç—Ç–æ–π –∏–≥—Ä—ã —Å –ª–∏–Ω–∫–æ—Ä–∞–º–∏!**")
                return

        except KeyError:

            await ctx.reply("**–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∏–≥—Ä—ã Battleships, –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!**")
            return

        if time() - game.timer > game.TIMEOUT:

            game.current_round_player = game.next_player()

            await ctx.send(f"**–ê–¥–º–∏—Ä–∞–ª:anchor: <@!{game.current_round_player.discord_id}> –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã–π "
                           f"–ê–¥–º–∏—Ä–∞–ª:anchor: <@!{game.next_player().discord_id}> –∏–∑-–∑–∞ "
                           f"–±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ!**")

            self.delete_game(ctx, game)

        else:

            await ctx.reply(f"**<@!{game.next_player().discord_id}> –∏–º–µ–µ—Ç –µ—â–µ ~{game.TIMEOUT - (time() - game.timer)}"
                            f" —Å–µ–∫—É–Ω–¥—ã –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!**")

    @commands.command(aliases=["Myfleet", "MYFLEET", "mYFLEET"])
    async def myfleet(self, ctx: Context):

        try:

            game = self._player_to_game[str(ctx.author.id)]

        except KeyError:

            await ctx.reply("**–í—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ –ø—Ä–æ –ª–∏–Ω–∫–æ—Ä—ã!**")
            return

        fleet_dis = game.display(discord_id=ctx.author.id, view_opponent_fleet=False)

        await ctx.author.send(
            content=f"**–Ω–∞—Å—Ç–∞–ª–∞ –æ—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–∞ <@!{game.current_round_player.discord_id}>(–í–∞—à —Ñ–ª–æ—Ç:—è–∫–æ—Ä—å:)**\n"
                    f"{fleet_dis}"
        )

    @commands.command(aliases=["Bsurrender", "BSURRENDER", "bSURRENDER"])
    async def bsurrender(self, ctx: Context):

        try:

            game = self._channel_to_game[str(ctx.channel.id)]

            if ctx.author.id not in game.player_ids:
                await ctx.reply("**–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é —ç—Ç–æ–π –∏–≥—Ä—ã —Å –ª–∏–Ω–∫–æ—Ä–∞–º–∏!**")
                return

        except KeyError:

            await ctx.reply("**–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∏–≥—Ä—ã Battleships, –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!**")
            return

        game.ongoing = False

        defeated = game.get_player_by_id(ctx.author.id)
        winner = [x for x in game.player_ids if x != defeated.discord_id][0]

        await ctx.send(f"**–ê–¥–º–∏—Ä–∞–ª:anchor:<@!{defeated.discord_id}> —Å–¥–∞–ª—Å—è –∞–¥–º–∏—Ä–∞–ª—É:anchor:<@!{winner}>**")

        self.delete_game(ctx, game)

    @commands.command(aliases=["Btie", "BTIE", "bTIE"])
    async def btie(self, ctx: Context):

        try:

            game = self._channel_to_game[str(ctx.channel.id)]

            if ctx.author.id not in game.player_ids:
                await ctx.reply("**–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é —ç—Ç–æ–π –∏–≥—Ä—ã —Å –ª–∏–Ω–∫–æ—Ä–∞–º–∏!**")
                return

        except KeyError:

            await ctx.reply("**–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∏–≥—Ä—ã Battleships, –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!**")
            return

        proposed_tie_player = game.get_player_by_id(ctx.author.id)
        other_player = [x for x in game.players if x.discord_id != ctx.author.id][0]

        proposed_tie_player.proposed_tie = True

        if proposed_tie_player.proposed_tie and other_player.proposed_tie:

            game.ongoing = False

            await ctx.send(f"**–ê–¥–º–∏—Ä–∞–ª:anchor:<@!{proposed_tie_player.discord_id}> "
                           f"–∏ –ê–¥–º–∏—Ä–∞–ª:anchor:<@!{proposed_tie_player.discord_id}>"
                           f" —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –Ω–∏—á—å—é!**")

            self.delete_game(ctx, game)

        else:

            await ctx.send(f"**–ê–¥–º–∏—Ä–∞–ª:anchor:<@!{proposed_tie_player.discord_id}> "
                           f"–ø—Ä–µ–¥–ª–æ–∂–∏–ª –≥–∞–ª—Å—Ç—É–∫ –∞–¥–º–∏—Ä–∞–ª—É:anchor:<@!{other_player}>**")

    @classmethod
    async def display(cls, ctx: Context, game: bb.BattleshipsGame):

        fleet_dis = game.display()

        await ctx.send(
            content=f"**–ù–∞—Å—Ç–∞–ª–∞ –æ—á–µ—Ä–µ–¥—å <@!{game.current_round_player.discord_id}>(–§–ª–æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:crossed_swords:)**\n"
                    f"{fleet_dis}"
        )

    @classmethod
    def delete_game(cls, ctx: Context, game: bb.BattleshipsGame):

        Game.occupied_channels.remove(ctx.channel.id)
        del cls._channel_to_game[str(ctx.channel.id)]

        for player in game.players:

            Player.occupied_players.remove(player.discord_id)
            del cls._player_to_game[str(player.discord_id)]

        del game

    @bchallenge.error
    async def bchallenge_error(self, ctx: Context, error: Exception):

        prefix = get_prefix(self.client, ctx)

        if isinstance(error, commands.MissingRequiredArgument):

            await ctx.reply("**–í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
                            f"Example: {prefix}bchallenge @user**")

        elif isinstance(error, commands.UserNotFound):

            await ctx.reply("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω!\n"
                            f"Example: {prefix}bchallenge @user**")

    @s.error
    async def s_error(self, ctx: Context, error: Exception):
        prefix = get_prefix(self.client, ctx)

        if isinstance(error, commands.MissingRequiredArgument):

            await ctx.reply("**–í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!\n"
                            f"Example: {prefix}s c8**")


def setup(client):
    client.add_cog(BattleshipsGameCog(client))
