from discord.ext import commands
from discord.ext.commands import Context
from discord import Client, User, Embed, Colour
import classes.games.TicTacToe as tic
from classes.Game import Game
from classes.Player import Player
from main import get_prefix
from time import time
import asyncio


class TicTacToeGameCog(commands.Cog):

    _channel_to_game: dict[str, tic.TicTacToeGame] = {}

    def __init__(self, client: Client):
        self.client: Client = client

    @commands.command()
    async def tchallenge(self, ctx: Context, user: User):
        await ctx.message.delete()

        if ctx.guild is None:
            await ctx.reply("**–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤ –∫–æ–º—É-–ª–∏–±–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞**")
            return

        if ctx.author.id == user.id:
            await ctx.reply("**–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤ —Å–∞–º–æ–º—É —Å–µ–±–µ!**")
            return

        if ctx.channel.id in Game.occupied_channels:
            await ctx.reply("**–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –∑–∞–Ω—è—Ç –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–π!**")
            return

        if ctx.author.id in Player.occupied_players:
            await ctx.reply("**–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!**")
            return

        if user.id in Player.occupied_players:
            await ctx.reply(f"**{user.mention} —ç—Ç–æ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ!**")
            return

        embed = Embed(
            title="–ö–æ–º–∞–Ω–¥—ã –≤ –∏–≥—Ä–µ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ üìù –ö–æ–º–∞–Ω–¥—ã –≤ –∏–≥—Ä–µ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ üìù",
            color=Colour.red()
        )

        prefix = get_prefix(self.client, ctx)

        embed.add_field(
            name="In-Game Commands ‚öôÔ∏è",
            value=f"**{prefix}tchallenge @user** (–≤—ã–∑–æ–≤–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–≥—Ä—É –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏)\n"
                  f"**{prefix}p pos** (–ø–æ–º–µ—Å—Ç–∏—Ç–µ —Å–≤–æ–π —Å–∏–º–≤–æ–ª –≤ pos, —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 8\n"
                  f"**{prefix}tsurrender** (–ø—Ä–æ–∏–≥—Ä–∞–π—Ç–µ –∏–≥—Ä—É)\n"
                  f"**{prefix}ttimeout** (–≤—ã–∏–≥—Ä–∞–π—Ç–µ, –µ—Å–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –∏–≥—Ä–∞–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 100 —Å–µ–∫—É–Ω–¥)\n"
                  f"**{prefix}ttie** (–ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ–µ–º—É –æ–ø–ø–æ–Ω–µ–Ω—Ç—É –Ω–∏—á—å—é)\n"
        )

        message = await ctx.send(
            content=f"**{ctx.author.mention} –±—Ä–æ—Å–∏–ª –≤—ã–∑–æ–≤ {user.mention} –∫ –∏–≥—Ä–µ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏,"
                    f" —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –ª–∏ –æ–Ω?**",
            embed=embed
        )

        reactions = ["‚úÖ", "‚ùå"]
        accepted = False

        for reaction in reactions:
            await message.add_reaction(reaction)

        def check(react, author):
            return author == user and str(react.emoji) in reactions

        while True:
            try:

                reaction, user = await self.client.wait_for("reaction_add", timeout=30, check=check)

                if str(reaction.emoji) == "‚úÖ":

                    accepted = True
                    break

                elif str(reaction.emoji) == "‚ùå":
                    break

            except asyncio.TimeoutError:
                break

        if accepted:

            if ctx.channel.id in Game.occupied_channels:

                await ctx.reply("**–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –±—ã–ª –∑–∞–Ω—è—Ç –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–∑–æ–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç!**")
                return

            if ctx.author.id in Player.occupied_players:

                await ctx.reply("**–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ –µ—â–µ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–∑–æ–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç!**")
                return

            if user.id in Player.occupied_players:

                await ctx.reply(f"**{user.mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ –µ—â–µ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–∑–æ–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç!**")
                return

            players = [ctx.author.id, user.id]

            game = tic.TicTacToeGame(players)

            Game.occupied_channels.append(ctx.channel.id)
            self._channel_to_game[str(ctx.channel.id)] = game

            for player in players:

                Player.occupied_players.append(player)

            await ctx.send(
                content=f"**{ctx.author.mention} ‚öîÔ∏è {user.mention}\n"
                        f"-------------------------\n" 
                        f"{game.get_player_by_id(ctx.author.id).emoji}{ctx.author.mention}\n"
                        f"{game.get_player_by_id(user.id).emoji}{user.mention}**"
            )

            await asyncio.sleep(1)

            game.timer = time()
            game.ongoing = True

            await self.display(ctx, game)  # send the first message

        else:

            await ctx.reply(f"**{user.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª/–Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—ã–∑–æ–≤!**")

    @commands.command()
    async def p(self, ctx: Context, pos: int):

        try:

            game = self._channel_to_game[str(ctx.channel.id)]

            if ctx.author.id not in game.player_ids:

                await ctx.reply("**–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é —ç—Ç–æ–π –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!**")
                return

        except KeyError:

            await ctx.reply("**–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!**")
            return

        if pos not in range(0, 9):

            await ctx.reply("**–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-8!**")
            return

        if game.current_round_player.discord_id != ctx.author.id:

            await ctx.reply("**–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å!**")
            return

        success = game.board.place(game.current_round_player.symbol, pos)

        if success:

            if game.board.check_win(game.current_round_player.symbol):

                winner = game.current_round_player
                loser = game.next_player()

                await ctx.send(f"**{winner.emoji}<@!{winner.discord_id}> –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã–π "
                               f"{loser.emoji}<@!{loser.discord_id}> –≤ –∏–≥—Ä–µ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!**")


                self.delete_game(ctx, game)

            else:

                game.next_round()
                await self.display(ctx, game)

        else:

            await ctx.reply(f"**–ú–µ—Å—Ç–æ #{pos} –∑–∞–Ω—è—Ç–æ!**")

    @commands.command()
    async def tsurrender(self, ctx: Context):

        try:

            game = self._channel_to_game[str(ctx.channel.id)]

            if ctx.author.id not in game.player_ids:

                await ctx.reply("**–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é —ç—Ç–æ–π –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!**")
                return

        except KeyError:

            await ctx.reply("**–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!**")
            return

        loser = game.get_player_by_id(ctx.author.id)
        winner = [x for x in game.players if x.discord_id != loser.discord_id][0]

        await ctx.send(f"**{loser.emoji}<@!{loser.discord_id}> —Å–¥–∞–ª—Å—è –Ω–∞ {winner.emoji}<@!{winner.discord_id}>!**")

        self.delete_game(ctx, game)

    @commands.command()
    async def ttie(self, ctx: Context):

        try:

            game = self._channel_to_game[str(ctx.channel.id)]

            if ctx.author.id not in game.player_ids:

                await ctx.reply("**–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é —ç—Ç–æ–π –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!**")
                return

        except KeyError:

            await ctx.reply("**–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!**")
            return

        thisplayer = game.get_player_by_id(ctx.author.id)
        otherplayer = [x for x in game.players if x.discord_id != thisplayer.discord_id][0]

        thisplayer.proposed_tie = True

        if thisplayer.proposed_tie and otherplayer.proposed_tie:

            await ctx.send(
                f"**{thisplayer.emoji}<@!{thisplayer.discord_id}> –∏ {otherplayer.emoji}<@!{otherplayer.discord_id}>"
                f"—Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –Ω–∏—á—å—é!**"
            )

            self.delete_game(ctx, game)

        else:

            await ctx.send(
                f"**{thisplayer.emoji}<@!{thisplayer.discord_id}> –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–∏—á—å—é"
                f" to {otherplayer.emoji}<@!{otherplayer.discord_id}>!**"
            )

    @commands.command()
    async def ttimeout(self, ctx: Context):

        try:

            game = self._channel_to_game[str(ctx.channel.id)]

            if ctx.author.id not in game.player_ids:
                await ctx.reply("**–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é —ç—Ç–æ–π –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!**")
                return

        except KeyError:

            await ctx.reply("**–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!**")
            return

        if time() - game.timer > game.TIMEOUT:

            game.current_round_player = game.next_player()

            winner = game.current_round_player
            loser = game.next_player()

            await ctx.send(
                f"**{winner.emoji}<@!{winner.discord_id}> –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã–π "
                f"{loser.emoji}<@!{loser.discord_id}> –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ**"
                )

            self.delete_game(ctx, game)

        else:

            await ctx.reply(f"**<@!{game.next_player().discord_id}> –∏–º–µ–µ—Ç –µ—â–µ ~{game.TIMEOUT - (time() - game.timer)}"
                            f" —Å–µ–∫—É–Ω–¥—ã –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!**")

    @classmethod
    async def display(cls, ctx: Context, game: tic.TicTacToeGame):
        txt = game.board.display()

        await ctx.send(f"**—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ <@!{game.current_round_player.discord_id}>'s "
                       f"({game.current_round_player.emoji})**\n")

        # these 2 messages are split, because discord will make emojis smaller when they are combined with normal text

        await ctx.send(txt)

    @classmethod
    def delete_game(cls, ctx: Context, game: tic.TicTacToeGame):

        Game.occupied_channels.remove(ctx.channel.id)
        del cls._channel_to_game[str(ctx.channel.id)]

        for player_id in game.player_ids:

            Player.occupied_players.remove(player_id)

        del game

    @tchallenge.error
    async def tchallenge_error(self, ctx: Context, error: Exception):

        prefix = get_prefix(self.client, ctx)

        if isinstance(error, commands.MissingRequiredArgument):

            await ctx.reply("**–í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
                            f"Example: {prefix}tchallenge @user**")

        elif isinstance(error, commands.UserNotFound):

            await ctx.reply("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω!\n"
                            f"Example: {prefix}tchallenge @user**")

    @p.error
    async def p_error(self, ctx: Context, error: Exception):
        prefix = get_prefix(self.client, ctx)

        if isinstance(error, commands.MissingRequiredArgument):

            await ctx.reply("**–í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!\n"
                            f"Example: {prefix}p 4**")

def setup(client):
    client.add_cog(TicTacToeGameCog(client))
